{
    "AWSTemplateFormatVersion" : "2010-09-09",

    "Description" : "@APP_DESCRIPTION@",

    "Parameters" : {
        "KeyName": {
            "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
        },

        "InstanceType" : {
            "Description" : "EC2 instance type",
            "Type" : "String",
            "Default" : "m3.medium",
            "AllowedValues" : [ "m3.medium" ],
            "ConstraintDescription" : "must be a valid EC2 instance type."
        },

        "IamUser": {
            "Description" : "IAM user for login to private docker registry",
            "Type": "String",
            "Default" : "@IAM_USER@",
            "MinLength": "10",
            "ConstraintDescription" : "cannot be empty."
        },

        "IamSecret": {
            "Description" : "Secret of the IAM user",
            "Type": "String",
            "Default" : "@IAM_SECRET@",
            "MinLength": "10",
            "ConstraintDescription" : "cannot be empty."
        },

        "DockerImage": {
            "Description" : "Docker image to run",
            "Type": "String",
            "Default" : "@DOCKER_IMAGE@",
            "MinLength": "10",
            "ConstraintDescription" : "cannot be empty."
        }

    },

    "Mappings" : {
        "AWSInstanceType2Arch" : {
            "m3.medium"    : { "Arch" : "HVM64"  }
        },

        "AWSInstanceType2NATArch" : {
            "m3.medium"    : { "Arch" : "NATHVM64"  }
        },

        "AWSRegionArch2AMI" : {
            "eu-central-1"     : {"HVM64" : "ami-3f1bd150"}
        }

    },

    "Resources" : {
        "DockerHost" : {
            "Type" : "AWS::EC2::Instance",
            "Properties" : {
                "InstanceType" : { "Ref" : "InstanceType" },
                "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
                "KeyName" : { "Ref" : "KeyName" },
                "ImageId" : { 
                    "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                        { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } 
                    ] 
                },
                "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash -v\n",
                    "apt-get update\n",
                    "apt-get -y install curl python-setuptools\n",
                    "mkdir aws-cfn-bootstrap-latest\n",
                    "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                    "easy_install aws-cfn-bootstrap-latest\n",
                    "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                    "apt-get install -y linux-image-extra-$(uname -r) linux-image-extra-virtual\n",
                    "apt-get install -y apt-transport-https ca-certificates software-properties-common awscli jq\n",
                    "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -\n",
                    "add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n",
                    "apt-get update\n",
                    "apt-get install -y docker-ce\n",
                    "usermod -a -G docker ubuntu\n",
                    "sudo -u ubuntu mkdir /home/ubuntu/.aws\n",
                    "echo '[default]' >> /home/ubuntu/.aws/credentials\n",
                    "echo aws_access_key_id=", {"Ref" : "IamUser"}, " >> /home/ubuntu/.aws/credentials\n",
                    "echo aws_secret_access_key=", {"Ref" : "IamSecret"}, " >> /home/ubuntu/.aws/credentials\n",
                    "echo '[default]' >> /home/ubuntu/.aws/config\n",
                    "echo region=eu-central-1 >> /home/ubuntu/.aws/config\n",
                    "echo output=json >> /home/ubuntu/.aws/config\n",
                    "chown ubuntu:ubuntu /home/ubuntu/.aws /home/ubuntu/.aws/*\n",
                    "export docker_image='", {"Ref" : "DockerImage"}, "'\n",
                    "export token=$(su -l ubuntu -c 'aws ecr get-authorization-token --output text --query authorizationData[].authorizationToken' | base64 -d | cut -d: -f2)\n",
                    "export docker_registry=$(echo $docker_image | cut -d/ -f1)\n",
                    "echo docker_image=$docker_image >> /home/ubuntu/vars\n",
                    "echo token=$token >> /home/ubuntu/vars\n",
                    "echo docker_registry=$docker_registry >> /home/ubuntu/vars\n",
                    "chown ubuntu:ubuntu /home/ubuntu/vars\n",
                    "su -l ubuntu -c \"docker login -u AWS -p $token -e none $docker_registry && docker run -dt -p 80:8080 --name app $docker_image\"\n",
                    "/usr/local/bin/cfn-signal -e $? --stack ", { "Ref" : "AWS::StackName" }, " --resource DockerHost --region eu-central-1\n"
                ]]}}
            },
            "CreationPolicy" : {
                "ResourceSignal" : {
                    "Timeout" : "PT10M"
                }
            }  
        },

        "InstanceSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Enable SSH access via port 22 and HTTP access via port 80",
                "SecurityGroupIngress" : [ 
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "22",
                        "ToPort" : "22",
                        "CidrIp" : "0.0.0.0/0"
                    } ,
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "80",
                        "ToPort" : "80",
                        "CidrIp" : "0.0.0.0/0"
                    } 
                ]
            }
        }
    },

    "Outputs" : {
        "InstanceId" : {
            "Description" : "InstanceId of the DockerHost",
            "Value" : { "Ref" : "DockerHost" }
        },
        "AmznDckBaseAZ" : {
            "Description" : "Availability Zone of the DockerHost",
            "Value" : { "Fn::GetAtt" : [ "DockerHost", "AvailabilityZone" ] }
        },
        "AmznDckBasePublicDNS" : {
            "Description" : "Public DNSName of the DockerHost",
            "Value" : { "Fn::GetAtt" : [ "DockerHost", "PublicDnsName" ] }
        },
        "AmznDckBasePublicIP" : {
            "Description" : "Public IP address of the DockerHost",
            "Value" : { "Fn::GetAtt" : [ "DockerHost", "PublicIp" ] }
        }
    }
}


